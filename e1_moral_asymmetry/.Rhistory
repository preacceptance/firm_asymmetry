if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
#check that we have equal numbers for each condition
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
table(data$condNum)[1]/300
table(data$condNum)[2]/300
table(data$condNum)[3]/300
#number of workers before exclusions
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
if(TRUE) {
filenames_old <- list.files(pattern=('*txt'))
# Rename all files in the files list, and rename them by renaming the part before the first "_" with the integer in order
# Also, save the part that we renamed as well as the integers we assigned them to in a csv file, so that it's easy to see which file corresponds to which participant
for(i in 1:length(files)) {
# Print "Renaming [worker_id] to [num]"
print(paste0("Renaming ", files[i], " to ", i))
file.rename(files[i], paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i]))))
files[i] <- paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i])))
}
# Also anonymize the 'workerID' field in each file to the integer we assigned it to, and save the file
for(i in 1:length(files)) {
myJSON <- fromJSON(files[i])
# We should save the myJSON$workerID as the integer before the first "_"
w_num <- substr(files[i], 1, regexpr("_", files[i])-1)
print(paste0(files[i], " -- ", w_num))
myJSON$workerID <- w_num
# Change workerId's in the trialStructs as well
myJSON$trialStruct['workerId'] <- rep(w_num, dim(myJSON$trialStruct['workerId'])[1])
# Write the text into files[i]
write(toJSON(myJSON), files[i])
}
worker_ids <- c()
nums <- c()
for(i in 1:length(filenames_old)) {
worker_ids <- c(worker_ids, substr(filenames_old[i], 1, regexpr("_", filenames_old[i]) - 1))
nums <- c(nums, substr(files[i], 1, regexpr("_", files[i]) - 1))
}
filenames <- as.data.frame(cbind(worker_ids, nums))
colnames(filenames) <- c('worker_id', 'integer')
# Remove NA column
filenames <- filenames[filenames$worker_id != 'NA',]
filenames$`NA`<- NULL
write.csv(filenames, 'filenames_e1.csv')
}
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The limit of personal identity
#Experiment 4
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
#check that we have equal numbers for each condition
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
table(data$condNum)[1]/300
table(data$condNum)[2]/300
table(data$condNum)[3]/300
#number of workers before exclusions
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
if(TRUE) {
filenames_old <- list.files(pattern=('*txt'))
# Rename all files in the files list, and rename them by renaming the part before the first "_" with the integer in order
# Also, save the part that we renamed as well as the integers we assigned them to in a csv file, so that it's easy to see which file corresponds to which participant
for(i in 1:length(files)) {
# Print "Renaming [worker_id] to [num]"
print(paste0("Renaming ", files[i], " to ", i))
file.rename(files[i], paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i]))))
files[i] <- paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i])))
}
# Also anonymize the 'workerID' field in each file to the integer we assigned it to, and save the file
for(i in 1:length(files)) {
myJSON <- fromJSON(files[i])
# We should save the myJSON$workerID as the integer before the first "_"
w_num <- substr(files[i], 1, regexpr("_", files[i])-1)
print(paste0(files[i], " -- ", w_num))
myJSON$workerID <- w_num
# Change workerId's in the trialStructs as well
myJSON$trialStruct['workerId'] <- rep(w_num, dim(myJSON$trialStruct['workerId'])[1])
# Write the text into files[i]
write(toJSON(myJSON), files[i])
}
worker_ids <- c()
nums <- c()
for(i in 1:length(filenames_old)) {
worker_ids <- c(worker_ids, substr(filenames_old[i], 1, regexpr("_", filenames_old[i]) - 1))
nums <- c(nums, substr(files[i], 1, regexpr("_", files[i]) - 1))
}
filenames <- as.data.frame(cbind(worker_ids, nums))
colnames(filenames) <- c('worker_id', 'integer')
# Remove NA column
filenames <- filenames[filenames$worker_id != 'NA',]
filenames$`NA`<- NULL
write.csv(filenames, 'filenames_e1.csv')
}
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The limit of personal identity
#Experiment 5
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
#check that we have equal numbers for each condition
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
table(data$condNum)[1]/300
table(data$condNum)[2]/300
table(data$condNum)[3]/300
#number of workers before exclusions
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
if(TRUE) {
filenames_old <- list.files(pattern=('*txt'))
# Rename all files in the files list, and rename them by renaming the part before the first "_" with the integer in order
# Also, save the part that we renamed as well as the integers we assigned them to in a csv file, so that it's easy to see which file corresponds to which participant
for(i in 1:length(files)) {
# Print "Renaming [worker_id] to [num]"
print(paste0("Renaming ", files[i], " to ", i))
file.rename(files[i], paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i]))))
files[i] <- paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i])))
}
# Also anonymize the 'workerID' field in each file to the integer we assigned it to, and save the file
for(i in 1:length(files)) {
myJSON <- fromJSON(files[i])
# We should save the myJSON$workerID as the integer before the first "_"
w_num <- substr(files[i], 1, regexpr("_", files[i])-1)
print(paste0(files[i], " -- ", w_num))
myJSON$workerID <- w_num
# Change workerId's in the trialStructs as well
myJSON$trialStruct['workerId'] <- rep(w_num, dim(myJSON$trialStruct['workerId'])[1])
# Write the text into files[i]
write(toJSON(myJSON), files[i])
}
worker_ids <- c()
nums <- c()
for(i in 1:length(filenames_old)) {
worker_ids <- c(worker_ids, substr(filenames_old[i], 1, regexpr("_", filenames_old[i]) - 1))
nums <- c(nums, substr(files[i], 1, regexpr("_", files[i]) - 1))
}
filenames <- as.data.frame(cbind(worker_ids, nums))
colnames(filenames) <- c('worker_id', 'integer')
# Remove NA column
filenames <- filenames[filenames$worker_id != 'NA',]
filenames$`NA`<- NULL
write.csv(filenames, 'filenames_e1.csv')
}
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The limit of personal identity
#Experiment 6
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
#check that we have equal numbers for each condition
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
table(data$condNum)[1]/300
table(data$condNum)[2]/300
table(data$condNum)[3]/300
#number of workers before exclusions
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
if(TRUE) {
filenames_old <- list.files(pattern=('*txt'))
# Rename all files in the files list, and rename them by renaming the part before the first "_" with the integer in order
# Also, save the part that we renamed as well as the integers we assigned them to in a csv file, so that it's easy to see which file corresponds to which participant
for(i in 1:length(files)) {
# Print "Renaming [worker_id] to [num]"
print(paste0("Renaming ", files[i], " to ", i))
file.rename(files[i], paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i]))))
files[i] <- paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i])))
}
# Also anonymize the 'workerID' field in each file to the integer we assigned it to, and save the file
for(i in 1:length(files)) {
myJSON <- fromJSON(files[i])
# We should save the myJSON$workerID as the integer before the first "_"
w_num <- substr(files[i], 1, regexpr("_", files[i])-1)
print(paste0(files[i], " -- ", w_num))
myJSON$workerID <- w_num
# Change workerId's in the trialStructs as well
myJSON$trialStruct['workerId'] <- rep(w_num, dim(myJSON$trialStruct['workerId'])[1])
# Write the text into files[i]
write(toJSON(myJSON), files[i])
}
worker_ids <- c()
nums <- c()
for(i in 1:length(filenames_old)) {
worker_ids <- c(worker_ids, substr(filenames_old[i], 1, regexpr("_", filenames_old[i]) - 1))
nums <- c(nums, substr(files[i], 1, regexpr("_", files[i]) - 1))
}
filenames <- as.data.frame(cbind(worker_ids, nums))
colnames(filenames) <- c('worker_id', 'integer')
# Remove NA column
filenames <- filenames[filenames$worker_id != 'NA',]
filenames$`NA`<- NULL
write.csv(filenames, 'filenames_e1.csv')
}
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The limit of personal identity
#Experiment S1
## clear workspace
rm(list = ls())
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(lsmeans)) {install.packages("lsmean"); require(lsmeans)}
if (!require(nnet)) {install.packages("nnet"); require(nnet)}
if (!require(mlogit)) {install.packages("mlogit"); require(mlogit)}
library(ggrepel)
##================ import data ================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
##================ anonymize worker ids ========================================
if(TRUE) {
filenames_old <- list.files(pattern=('*txt'))
# Rename all files in the files list, and rename them by renaming the part before the first "_" with the integer in order
# Also, save the part that we renamed as well as the integers we assigned them to in a csv file, so that it's easy to see which file corresponds to which participant
for(i in 1:length(files)) {
# Print "Renaming [worker_id] to [num]"
print(paste0("Renaming ", files[i], " to ", i))
file.rename(files[i], paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i]))))
files[i] <- paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i])))
}
# Also anonymize the 'workerID' field in each file to the integer we assigned it to, and save the file
for(i in 1:length(files)) {
myJSON <- fromJSON(files[i])
# We should save the myJSON$workerID as the integer before the first "_"
w_num <- substr(files[i], 1, regexpr("_", files[i])-1)
print(paste0(files[i], " -- ", w_num))
myJSON$workerID <- w_num
# Change workerId's in the trialStructs as well
#myJSON$trialStruct['workerId'] <- rep(w_num, dim(myJSON$trialStruct['workerId'])[1])
# Write the text into files[i]
write(toJSON(myJSON), files[i])
}
worker_ids <- c()
nums <- c()
for(i in 1:length(filenames_old)) {
worker_ids <- c(worker_ids, substr(filenames_old[i], 1, regexpr("_", filenames_old[i]) - 1))
nums <- c(nums, substr(files[i], 1, regexpr("_", files[i]) - 1))
}
filenames <- as.data.frame(cbind(worker_ids, nums))
colnames(filenames) <- c('worker_id', 'integer')
# Remove NA column
filenames <- filenames[filenames$worker_id != 'NA',]
filenames$`NA`<- NULL
write.csv(filenames, 'filenames_e1.csv')
}
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The capacity of personal identity
#Experiment 5
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Dropbox (Personal)/Research/Intuition/single_identity/pilots/e8_memory_association_self/data")
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The capacity of personal identity
#Experiment 5
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
setwd("../data/")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
length(unique(data$workerId)) #1 subjects
#check that we have equal numbers for each condition
table(data$label)
table(data$cond)
if(TRUE) {
filenames_old <- list.files(pattern=('*txt'))
# Rename all files in the files list, and rename them by renaming the part before the first "_" with the integer in order
# Also, save the part that we renamed as well as the integers we assigned them to in a csv file, so that it's easy to see which file corresponds to which participant
for(i in 1:length(files)) {
# Print "Renaming [worker_id] to [num]"
print(paste0("Renaming ", files[i], " to ", i))
file.rename(files[i], paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i]))))
files[i] <- paste0(i, substr(files[i], regexpr("_", files[i]), nchar(files[i])))
}
# Also anonymize the 'workerID' field in each file to the integer we assigned it to, and save the file
for(i in 1:length(files)) {
myJSON <- fromJSON(files[i])
# We should save the myJSON$workerID as the integer before the first "_"
w_num <- substr(files[i], 1, regexpr("_", files[i])-1)
print(paste0(files[i], " -- ", w_num))
myJSON$workerID <- w_num
# Change workerId's in the trialStructs as well
myJSON$trialStruct['workerId'] <- rep(w_num, dim(myJSON$trialStruct['workerId'])[1])
# Write the text into files[i]
write(toJSON(myJSON), files[i])
}
worker_ids <- c()
nums <- c()
for(i in 1:length(filenames_old)) {
worker_ids <- c(worker_ids, substr(filenames_old[i], 1, regexpr("_", filenames_old[i]) - 1))
nums <- c(nums, substr(files[i], 1, regexpr("_", files[i]) - 1))
}
filenames <- as.data.frame(cbind(worker_ids, nums))
colnames(filenames) <- c('worker_id', 'integer')
# Remove NA column
filenames <- filenames[filenames$worker_id != 'NA',]
filenames$`NA`<- NULL
write.csv(filenames, 'filenames_e1.csv')
}
R.home()
## Corporate Essence Analysis - Moral Asymmetry
## De Freitas, Khon, & Johnson
# Clear working directory
remove(list = ls())
# Set working directory to current file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Specify the path to your folder
folder_path <- "../"
# Find all CSV files recursively
file_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
# Columns to anonymize
cols_to_anonymize <- c('IPAddress', 'LocationLatitude', 'LocationLongitude')
# Loop through each file
for (file in file_list) {
# Read the CSV file
data <- read.csv(file, stringsAsFactors = FALSE)
# Check if the columns exist in the data
cols_exist <- intersect(cols_to_anonymize, names(data))
# Replace specified columns with "Anonymized"
if (length(cols_exist) > 0) {
data[cols_exist] <- "Anonymized"
}
# Write the modified data back to the same file
write.csv(data, file = file, row.names = FALSE)
}
